#!/usr/bin/env python3
from pathlib import Path
import subprocess
import time
import logging
from glob import glob
import configparser
from typing import NamedTuple


class WatchdogConfig(NamedTuple):
    ssh_ok_file: str
    check_successive_passes: int
    check_successive_seconds: float


def read_config_section_dict(filename, section):
    config = configparser.ConfigParser()

    if not config.read(filename):
        logging.warning(f"could not read config file {filename}")
        return {}

    try:
        return dict(config[section])
    except Exception:
        logging.warning("could not read config section [%s]", section)

    return {}


def read_watchdog_config(filename, section="watchdog"):
    d = read_config_section_dict(filename, section)

    return WatchdogConfig(
        ssh_ok_file=d.get("ssh_ok_file", None),
        check_successive_passes=int(d.get("check_successive_passes", 3)),
        check_successive_seconds=float(d.get("check_successive_seconds", 5.0)),
    )


def update_systemd_watchdog():
    try:
        subprocess.check_call(["systemd-notify", "WATCHDOG=1"])
    except Exception:
        logging.warning("skipping reset of systemd watchdog")


def time_now():
    return time.monotonic()


def seconds_since(start):
    return time.monotonic() - start


def ssh_connection_ok():
    try:
        return (
            "beehive:20022"
            in subprocess.check_output(["ss", "-tr", "state", "established"]).decode()
        )
    except Exception:
        return False


def require_successive_passes(check_func, successive_passes, successive_seconds):
    for _ in range(successive_passes):
        if not check_func():
            return False
        time.sleep(successive_seconds)
    return True


# NOTE Revisit how much of the network stack we should restart. For now, I want to cover all
# cases of wifi and modems and ssh tunnel issues.
def restart_network_services():
    logging.warning("restarting network services")

    # ensure proper ownership of ports, ttyACM* for Modem
    ports = glob("/dev/ttyACM*")
    subprocess.run(["chown", "root:root"] + ports)
    subprocess.run(["chmod", "660"] + ports)

    # restart network services
    subprocess.run(
        [
            "systemctl",
            "restart",
            "NetworkManager",
            "ModemManager",
            "waggle-reverse-tunnel",
        ]
    )


def reboot_os():
    logging.warning("rebooting the system")
    # aggressively but safely reboot the system
    subprocess.run(["systemctl", "--force", "reboot"])


# Recovery actions table [time (s), recovery function]
# restart networking stack after 15, 20 and 25 of no beehive connectivity
# reboot after 30 mins of no beehive connectivity
#
# NOTE We sort in increasing order of threshold so that our linear
# search finds the "earliest" available action
recovery_actions = sorted([
    (1800, reboot_os),
    (1500, restart_network_services),
    (1200, restart_network_services),
    (900, restart_network_services),
])


def main():
    logging.basicConfig(level=logging.INFO)

    config = read_watchdog_config("/etc/waggle/config.ini")

    last_connection_time = time_now()
    available_actions = recovery_actions.copy()

    while True:
        update_systemd_watchdog()

        logging.info("checking connection")
        if require_successive_passes(ssh_connection_ok,
                                     config.check_successive_passes,
                                     config.check_successive_seconds):
            logging.info("connection ok")

            if config.ssh_ok_file is not None:
                Path(config.ssh_ok_file).touch()
            else:
                logging.info("not setting flag for wagman-watchdog")
            
            last_connection_time = time_now()
            available_actions = recovery_actions.copy()
        else:
            logging.warning(
                "no connection for %ss", int(seconds_since(last_connection_time))
            )

        for thresh, action in available_actions:
            if seconds_since(last_connection_time) >= thresh:
                logging.warning("executing %ds recovery action", thresh)
                action()
                available_actions.remove((thresh, action))
                break

        time.sleep(15)


if __name__ == "__main__":
    main()
